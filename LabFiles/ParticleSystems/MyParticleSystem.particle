particle_system MySmoke1
{
	// Make the particles use the "Examples/Smoke" material, and be 10x10 units large.
	material			Examples/Smoke
	particle_width		10
	particle_height		10
	// Make the emitter limit the emitter to have at maximum 500 particles active.
	// And set the particle type as point, which always faces the camera.  
	quota			500
	billboard_type		point
	// Make the emitters origin a point.

	emitter Point
	{
		// Make the emitter emit 3 particles per second. 
		emission_rate		3
		// Emitt the particles in the given direction, at a velocity of 20 units per second.
		direction		0 1 0
		velocity		20
		// Destroy the particle after 10 seconds.
		time_to_live		10
	}

	affector Scaler
	{
		rate	10
	}

	// This affector will add the following values to the colour of the particles each second.Ã¾
	affector ColourFader
	{
		red		0.0
		green	-0.25
		blue	-0.25
	}

	// This affector will add the following values to the colour of the particles each second. 
	// Notice the suffix of the ColorFader(2), that is important.
	affector ColourFader2
	{
		// Notice the suffix here also, red(1) this indicates the color change per second for state 1
		red1	0.0
		green1	-1
		blue1	-1
		// Set the second state when the particle has 2 second left to live.
		state_change 2
		// And here is has the suffix 2, which in turn sets the change per second for state 2
		red2	0
		green2	+1
		blue2	+1
		// This is all works for the alpha channel to of course.
		alpha2	-1
	}

	// ColourInterpolators can have up to 6 colour intervals indexed 0 to 5. 
	affector ColourInterpolator
	{
		time0 0
		colour0 1 0 0 0

		time1 0.195
		colour1 1 1 0 1

		time2 0.39
		colour2 0 1 1 1

		time3 0.585
		colour3 0 0 1 1

		time4 0.78
		colour4 1 0 1 1

		time5 1
		colour5 0 1 0 0
	}

	// This will make the particles fly around like they have no tomorrow.
	affector DirectionRandomiser
	{
		// This indicates the magnitude of the random choices the particle makes.
		randomness	1000
		// Scope governs the chance that a given particle takes a random direction change scale from 0..1 ~ 0-100%
		scope		1
		// Here you can indicate if the particle should randomize its velocity or not. <true|false>
		keep_velocity true
	}

	// Deflector planes bounce the particles of the given plane.
	affector DeflectorPlane
	{
		//The point of the plane, note: the plane is infinite
		plane_point 	10 0 0
		// The normal vector of the plane, the direction of the particles will be mirror around this normal.
		plane_normal 	-0.7 0.7 0
		// The amount of velocity the particles retain after the collision.
		bounce 		1.0
	}

	// You can provide more than one plane.
	affector DeflectorPlane
	{
		plane_point		10 15 0
		plane_normal	-0.7 -0.7 0
		bounce		1.0
	}
}

particle_system MyFountain
{
	material			Examples/Flare
	particle_width		4
	particle_height		4
	quota				20000
	billboard_type		oriented_self

	emitter Point
	{
		angle			9
		emission_rate	150
		time_to_live	100
		direction		0 1 0
		velocity_min	60
		velocity_max	65
		colour				0 0 1
		colour_range_start	0 0 1
		colour_range_end	0 0.75 0.75
	}

	// Gravity
	affector LinearForce
	{
		force_vector		0 -80 0
		force_application	add
	}

	// Colour Fader
	affector ColourFader
	{
		red		-0
		green	-0.15
		blue	-0.15
	}

	// Make the ground bounce the particles up again
	affector DeflectorPlane
	{
		plane_point		0 0 0
		plane_normal	0 1 0
		bounce		0.2
	}
}

// This is from the Examples.particle file but with a few of the values
// have been modified and an affector has been added :)
particle_system MySnow
{
	quota	20000
	material	Examples/Flare
	particle_width	3
	particle_height	3
	cull_each	true
	renderer	billboard
	sorted	true
	local_space	false
	billboard_type	point

	emitter Box
	{
		angle	0
		colour	1 1 1 1
		colour_range_start	1 1 1 1
		colour_range_end	1 1 1 1
		direction	0 -1 0
		emission_rate	200
		position	0 100 0
		velocity	20
		velocity_min	20
		velocity_max	20
		time_to_live	12
		time_to_live_min	12
		time_to_live_max	12
		duration	0
		duration_min	0
		duration_max	0
		repeat_delay	0
		repeat_delay_min	0
		repeat_delay_max	0
		width	400
		height	400
		depth	1
	}

	affector DirectionRandomiser
	{
		randomness	10
	}

	// Make it so the snow lies on the ground for a bit
	affector DeflectorPlane {
		plane_point		0 0 0
		plane_normal	0 1 0
		bounce		0
	}
}